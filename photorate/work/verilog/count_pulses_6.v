/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module count_pulses_6 (
    input clk,
    input slowclk,
    input pulse,
    output reg [31:0] out
  );
  
  
  
  reg [31:0] M_running_count_d, M_running_count_q = 1'h0;
  reg [31:0] M_count_d, M_count_q = 1'h0;
  wire [1-1:0] M_ed_pulse_out;
  reg [1-1:0] M_ed_pulse_in;
  edge_detector_10 ed_pulse (
    .clk(clk),
    .in(M_ed_pulse_in),
    .out(M_ed_pulse_out)
  );
  wire [1-1:0] M_ed_slowclk_out;
  reg [1-1:0] M_ed_slowclk_in;
  edge_detector_10 ed_slowclk (
    .clk(clk),
    .in(M_ed_slowclk_in),
    .out(M_ed_slowclk_out)
  );
  
  always @* begin
    M_count_d = M_count_q;
    M_running_count_d = M_running_count_q;
    
    M_ed_pulse_in = pulse;
    M_ed_slowclk_in = slowclk;
    if (M_ed_pulse_out) begin
      M_count_d = M_running_count_q;
      M_running_count_d = 32'h00000000;
    end else begin
      if (M_ed_slowclk_out) begin
        M_running_count_d = M_running_count_q + 1'h1;
      end
    end
    out = M_count_q;
  end
  
  always @(posedge clk) begin
    M_running_count_q <= M_running_count_d;
    M_count_q <= M_count_d;
  end
  
endmodule
