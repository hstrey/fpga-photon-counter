/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [1-1:0] M_slowclk_value;
  counter_3 slowclk (
    .clk(clk),
    .rst(rst),
    .value(M_slowclk_value)
  );
  wire [1-1:0] M_pulse_out;
  timer_4 pulse (
    .clk(clk),
    .rst(rst),
    .out(M_pulse_out)
  );
  
  wire [40-1:0] M_btd_digits;
  reg [34-1:0] M_btd_value;
  bin_to_dec_5 btd (
    .value(M_btd_value),
    .digits(M_btd_digits)
  );
  
  wire [32-1:0] M_cnt_pls_out;
  count_pulses_6 cnt_pls (
    .clk(clk),
    .slowclk(M_slowclk_value),
    .pulse(M_pulse_out),
    .out(M_cnt_pls_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    usb_tx = usb_rx;
    M_btd_value = M_cnt_pls_out;
    M_seg_values = M_btd_digits[0+15-:16];
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led = 24'h000000;
  end
endmodule
